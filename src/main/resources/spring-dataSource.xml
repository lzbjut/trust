<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
            http://www.springframework.org/schema/mvc 
            http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
            http://www.springframework.org/schema/context 
            http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<!-- 数据源配置,alibaba的Druid(德鲁伊)数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
	    <!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
	    <property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!-- 配置初始化大小-->
		<property name="initialSize" value="0" />
		
		<!-- 连接池最大使用链接数 -->
		<property name="maxActive" value="60" />
		
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" /> <!-- 25200000 -->
		
		<property name="validationQuery" value="SELECT 'x' FROM DUAL" /><!-- SELECT 1  -->
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<!-- 打开removeAbandoned功能 -->
        <property name="removeAbandoned" value="true" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用）
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="20" /> -->
		
		<!-- 配置监控统计拦截的filters -->
	    <!-- <property name="filters" value="stat" /> -->
	</bean>

	<!-- MyBatis begin -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描包路径，如果需要扫描多个包，中间使用半角逗号隔开 -->
		<property name="basePackage" value="trust.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
 

	<!-- 声明式事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!--启动spring注解功能-->      
	<tx:annotation-driven transaction-manager="transactionManager" />  
	
	<!-- 通知 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="Save*" propagation="REQUIRED" />
			<tx:method name="*Create*" propagation="REQUIRED" />
			<tx:method name="Insert*" propagation="REQUIRED" />
			<tx:method name="Update*" propagation="REQUIRED" />
			<tx:method name="*Register" propagation="REQUIRED" />
			<tx:method name="Recharge" propagation="REQUIRED" />
			<tx:method name="Login" propagation="REQUIRED" />
			<tx:method name="Delete*" propagation="REQUIRED" />
			<tx:method name="Payment" propagation="REQUIRED" />
			<tx:method name="CanCel*" propagation="REQUIRED" />
			<tx:method name="Callback*" propagation="REQUIRED" />
			<tx:method name="Find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="Get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="List*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="Select*" propagation="SUPPORTS" read-only="true" />
			
		</tx:attributes>
	</tx:advice>
	
	<!-- aop配置 -->
	 <aop:config expose-proxy="true">
        <!-- 只对业务逻辑层实施事务 -->
        <aop:pointcut id="txPointcut" expression="execution(* trust.*.*.service.impl.*.*(..))" />
        <!-- Advisor定义，切入点和通知分别为txPointcut、txAdvice -->
        <aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
    </aop:config>
    
     

</beans>